buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
        springCloudVersion = 'Finchley.SR1'
    }
    repositories {
        mavenLocal()

        maven {
            name "aliyun1"
            url 'http://maven.aliyun.com/nexus/content/groups/public'
        }
        maven {
            name "aliyun2"
            url 'http://maven.aliyun.com/mvn/repository/'
        }
        maven {
            name "spring repo"
            url "http://repo.spring.io/release"
        }
        maven {
            name "spring milestone"
            url "https://repo.spring.io/milestone/"
        }

        jcenter()
        mavenCentral()
        maven {
            url 'http://repos.zeroturnaround.com/nexus/content/groups/zt-public/'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'checkstyle'

group 'cn.mmr.rudiment'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenLocal()

    maven {
        name "aliyun1"
        url 'http://maven.aliyun.com/nexus/content/groups/public'
    }
    maven {
        name "aliyun2"
        url 'http://maven.aliyun.com/mvn/repository/'
    }
    maven {
        name "spring repo"
        url "http://repo.spring.io/release"
    }
    maven {
        name "spring milestone"
        url "https://repo.spring.io/milestone/"
    }

    jcenter()
    mavenCentral()
    maven {
        url 'http://repos.zeroturnaround.com/nexus/content/groups/zt-public/'
    }
}

/*
  ext {
    springCloudVersion = 'Finchley.SR1'
}*/

dependencyManagement {
    imports {
        // spring bom helps us to declare dependencies without specifying version numbers.
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
    }
}

dependencies {
    compile(
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client',
            'org.apache.commons:commons-lang3:3.5',
            'com.alibaba:fastjson:1.2.35',
            'mysql:mysql-connector-java',
            'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2',
            'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.2',
            'org.springframework.boot:spring-boot-starter-data-mongodb',
            'org.springframework.boot:spring-boot-starter-data-rest',
            'org.springframework.boot:spring-boot-starter-amqp'
    )
    runtime('org.springframework.boot:spring-boot-devtools')
    compileOnly('org.projectlombok:lombok')

    testCompile(
            'org.springframework.boot:spring-boot-starter-test',
            'io.projectreactor:reactor-test',
            'commons-io:commons-io:2.6',
            'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:1.3.2',
            'com.h2database:h2',
            'de.flapdoodle.embed:de.flapdoodle.embed.mongo',
            'org.apache.qpid:qpid-broker:6.1.2'
    )

    integTestCompile sourceSets.main.output
    integTestCompile configurations.testCompile
    integTestCompile sourceSets.test.output
    integTestRuntime configurations.testRuntime
}

task integTest(type: Test) {
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
}

check.dependsOn integTest


integTest {
    maxHeapSize = "1024m"
    maxParallelForks = 1
    ignoreFailures Boolean.valueOf(System.getProperty("test.ignoreFailures", "false"))

    // jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=6006'
    testLogging {
        events "started", "passed", "skipped", "failed"
        afterSuite testReport("IntegTest")
    }
}

Closure testReport(testType) {
    return { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "${testType} Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }

    }
}